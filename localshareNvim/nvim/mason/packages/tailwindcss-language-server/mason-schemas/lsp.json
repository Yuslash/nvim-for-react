{"properties":{"tailwindCSS.validate":{"markdownDescription":"Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings","type":"boolean","scope":"language-overridable","default":true},"tailwindCSS.lint.cssConflict":{"markdownDescription":"Class names on the same HTML element which apply the same CSS property or properties","scope":"language-overridable","default":"warning","type":"string","enum":["ignore","warning","error"]},"tailwindCSS.lint.invalidApply":{"markdownDescription":"Unsupported use of the [`@apply` directive](https:\/\/tailwindcss.com\/docs\/functions-and-directives\/#apply)","scope":"language-overridable","default":"error","type":"string","enum":["ignore","warning","error"]},"tailwindCSS.lint.invalidScreen":{"markdownDescription":"Unknown screen name used with the [`@screen` directive](https:\/\/tailwindcss.com\/docs\/functions-and-directives\/#screen)","scope":"language-overridable","default":"error","type":"string","enum":["ignore","warning","error"]},"tailwindCSS.lint.invalidVariant":{"markdownDescription":"Unknown variant name used with the [`@variants` directive](https:\/\/tailwindcss.com\/docs\/functions-and-directives\/#variants)","scope":"language-overridable","default":"error","type":"string","enum":["ignore","warning","error"]},"tailwindCSS.includeLanguages":{"markdownDescription":"Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.\n E.g.: `{\"plaintext\": \"html\"}`","type":"object","default":{},"additionalProperties":{"type":"string"}},"tailwindCSS.lint.invalidConfigPath":{"markdownDescription":"Unknown or invalid path used with the [`theme` helper](https:\/\/tailwindcss.com\/docs\/functions-and-directives\/#theme)","scope":"language-overridable","default":"error","type":"string","enum":["ignore","warning","error"]},"tailwindCSS.lint.invalidTailwindDirective":{"markdownDescription":"Unknown value used with the [`@tailwind` directive](https:\/\/tailwindcss.com\/docs\/functions-and-directives\/#tailwind)","scope":"language-overridable","default":"error","type":"string","enum":["ignore","warning","error"]},"tailwindCSS.lint.recommendedVariantOrder":{"markdownDescription":"Class variants not in the recommended order (applies in [JIT mode](https:\/\/tailwindcss.com\/docs\/just-in-time-mode) only)","scope":"language-overridable","default":"warning","type":"string","enum":["ignore","warning","error"]},"tailwindCSS.experimental.classRegex":{"scope":"language-overridable","type":"array"},"tailwindCSS.experimental.configFile":{"markdownDescription":"Manually specify the Tailwind config file or files that should be read to provide IntelliSense features. Can either be a single string value, or an object where each key is a config file path and each value is a glob or array of globs representing the set of files that the config file applies to.","type":["null","string","object"],"default":null},"tailwindCSS.classAttributes":{"markdownDescription":"The HTML attributes for which to provide class completions, hover previews, linting etc.","type":"array","default":["class","className","ngClass","class:list"],"items":{"type":"string"}},"tailwindCSS.showPixelEquivalents":{"markdownDescription":"Show `px` equivalents for `rem` CSS values.","type":"boolean","default":true},"tailwindCSS.rootFontSize":{"markdownDescription":"Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `#tailwindCSS.showPixelEquivalents#`.","type":"number","default":16},"tailwindCSS.suggestions":{"markdownDescription":"Enable autocomplete suggestions.","type":"boolean","scope":"language-overridable","default":true},"tailwindCSS.inspectPort":{"markdownDescription":"Enable the Node.js inspector agent for the language server and listen on the specified port.","type":["number","null"],"default":null},"tailwindcss-intellisense.trace.server":{"scope":"window","default":"off","type":"string","enum":["off","messages","verbose"],"description":"Traces the communication between VS Code and the Tailwind CSS Language Server."},"tailwindCSS.hovers":{"markdownDescription":"Enable hovers.","type":"boolean","scope":"language-overridable","default":true},"tailwindCSS.emmetCompletions":{"markdownDescription":"Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`","type":"boolean","default":false},"tailwindCSS.codeActions":{"markdownDescription":"Enable code actions.","type":"boolean","scope":"language-overridable","default":true},"tailwindCSS.files.exclude":{"markdownDescription":"Configure glob patterns to exclude from all IntelliSense features. Inherits all glob patterns from the `#files.exclude#` setting.","type":"array","default":["**\/.git\/**","**\/node_modules\/**","**\/.hg\/**","**\/.svn\/**"],"items":{"type":"string"}},"tailwindCSS.colorDecorators":{"markdownDescription":"Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.","type":"boolean","scope":"language-overridable","default":true}},"title":"Tailwind CSS IntelliSense"}